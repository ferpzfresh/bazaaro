# source: https://eu1.prisma.sh/dan-alexandru-dicu-80a227/bazaarodb/dev
# timestamp: Tue Jul 17 2018 01:53:02 GMT+0300 (GTB Daylight Time)

type AggregateEntry {
  count: Int!
}

type AggregateReview {
  count: Int!
}

type AggregateUser {
  count: Int!
}

type AggregateVote {
  count: Int!
}

type BatchPayload {
  """The number of nodes that have been affected by the Batch operation."""
  count: Long!
}

scalar DateTime

type Entry implements Node {
  id: ID!
  createdAt: DateTime!
  description: String!
  title: String!
  produce: String!
  postedBy(where: UserWhereInput): User!
  rating: Float!
  no_reviews: Int!
  reviews(where: ReviewWhereInput, orderBy: ReviewOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Review!]
  price_lei: Int!
  price_bani: Int!
  per: String!
}

"""A connection to a list of items."""
type EntryConnection {
  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """A list of edges."""
  edges: [EntryEdge]!
  aggregate: AggregateEntry!
}

input EntryCreateInput {
  description: String!
  title: String!
  produce: String!
  rating: Float!
  no_reviews: Int!
  price_lei: Int!
  price_bani: Int!
  per: String!
  postedBy: UserCreateOneWithoutEntriesInput!
  reviews: ReviewCreateManyWithoutPostedOnInput
}

input EntryCreateManyWithoutPostedByInput {
  create: [EntryCreateWithoutPostedByInput!]
  connect: [EntryWhereUniqueInput!]
}

input EntryCreateOneWithoutReviewsInput {
  create: EntryCreateWithoutReviewsInput
  connect: EntryWhereUniqueInput
}

input EntryCreateWithoutPostedByInput {
  description: String!
  title: String!
  produce: String!
  rating: Float!
  no_reviews: Int!
  price_lei: Int!
  price_bani: Int!
  per: String!
  reviews: ReviewCreateManyWithoutPostedOnInput
}

input EntryCreateWithoutReviewsInput {
  description: String!
  title: String!
  produce: String!
  rating: Float!
  no_reviews: Int!
  price_lei: Int!
  price_bani: Int!
  per: String!
  postedBy: UserCreateOneWithoutEntriesInput!
}

"""An edge in a connection."""
type EntryEdge {
  """The item at the end of the edge."""
  node: Entry!

  """A cursor for use in pagination."""
  cursor: String!
}

enum EntryOrderByInput {
  id_ASC
  id_DESC
  createdAt_ASC
  createdAt_DESC
  description_ASC
  description_DESC
  title_ASC
  title_DESC
  produce_ASC
  produce_DESC
  rating_ASC
  rating_DESC
  no_reviews_ASC
  no_reviews_DESC
  price_lei_ASC
  price_lei_DESC
  price_bani_ASC
  price_bani_DESC
  per_ASC
  per_DESC
  updatedAt_ASC
  updatedAt_DESC
}

type EntryPreviousValues {
  id: ID!
  createdAt: DateTime!
  description: String!
  title: String!
  produce: String!
  rating: Float!
  no_reviews: Int!
  price_lei: Int!
  price_bani: Int!
  per: String!
}

type EntrySubscriptionPayload {
  mutation: MutationType!
  node: Entry
  updatedFields: [String!]
  previousValues: EntryPreviousValues
}

input EntrySubscriptionWhereInput {
  """Logical AND on all given filters."""
  AND: [EntrySubscriptionWhereInput!]

  """Logical OR on all given filters."""
  OR: [EntrySubscriptionWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [EntrySubscriptionWhereInput!]

  """
  The subscription event gets dispatched when it's listed in mutation_in
  """
  mutation_in: [MutationType!]

  """
  The subscription event gets only dispatched when one of the updated fields names is included in this list
  """
  updatedFields_contains: String

  """
  The subscription event gets only dispatched when all of the field names included in this list have been updated
  """
  updatedFields_contains_every: [String!]

  """
  The subscription event gets only dispatched when some of the field names included in this list have been updated
  """
  updatedFields_contains_some: [String!]
  node: EntryWhereInput
}

input EntryUpdateInput {
  description: String
  title: String
  produce: String
  rating: Float
  no_reviews: Int
  price_lei: Int
  price_bani: Int
  per: String
  postedBy: UserUpdateOneWithoutEntriesInput
  reviews: ReviewUpdateManyWithoutPostedOnInput
}

input EntryUpdateManyWithoutPostedByInput {
  create: [EntryCreateWithoutPostedByInput!]
  connect: [EntryWhereUniqueInput!]
  disconnect: [EntryWhereUniqueInput!]
  delete: [EntryWhereUniqueInput!]
  update: [EntryUpdateWithWhereUniqueWithoutPostedByInput!]
  upsert: [EntryUpsertWithWhereUniqueWithoutPostedByInput!]
}

input EntryUpdateOneWithoutReviewsInput {
  create: EntryCreateWithoutReviewsInput
  connect: EntryWhereUniqueInput
  delete: Boolean
  update: EntryUpdateWithoutReviewsDataInput
  upsert: EntryUpsertWithoutReviewsInput
}

input EntryUpdateWithoutPostedByDataInput {
  description: String
  title: String
  produce: String
  rating: Float
  no_reviews: Int
  price_lei: Int
  price_bani: Int
  per: String
  reviews: ReviewUpdateManyWithoutPostedOnInput
}

input EntryUpdateWithoutReviewsDataInput {
  description: String
  title: String
  produce: String
  rating: Float
  no_reviews: Int
  price_lei: Int
  price_bani: Int
  per: String
  postedBy: UserUpdateOneWithoutEntriesInput
}

input EntryUpdateWithWhereUniqueWithoutPostedByInput {
  where: EntryWhereUniqueInput!
  data: EntryUpdateWithoutPostedByDataInput!
}

input EntryUpsertWithoutReviewsInput {
  update: EntryUpdateWithoutReviewsDataInput!
  create: EntryCreateWithoutReviewsInput!
}

input EntryUpsertWithWhereUniqueWithoutPostedByInput {
  where: EntryWhereUniqueInput!
  update: EntryUpdateWithoutPostedByDataInput!
  create: EntryCreateWithoutPostedByInput!
}

input EntryWhereInput {
  """Logical AND on all given filters."""
  AND: [EntryWhereInput!]

  """Logical OR on all given filters."""
  OR: [EntryWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [EntryWhereInput!]
  id: ID

  """All values that are not equal to given value."""
  id_not: ID

  """All values that are contained in given list."""
  id_in: [ID!]

  """All values that are not contained in given list."""
  id_not_in: [ID!]

  """All values less than the given value."""
  id_lt: ID

  """All values less than or equal the given value."""
  id_lte: ID

  """All values greater than the given value."""
  id_gt: ID

  """All values greater than or equal the given value."""
  id_gte: ID

  """All values containing the given string."""
  id_contains: ID

  """All values not containing the given string."""
  id_not_contains: ID

  """All values starting with the given string."""
  id_starts_with: ID

  """All values not starting with the given string."""
  id_not_starts_with: ID

  """All values ending with the given string."""
  id_ends_with: ID

  """All values not ending with the given string."""
  id_not_ends_with: ID
  createdAt: DateTime

  """All values that are not equal to given value."""
  createdAt_not: DateTime

  """All values that are contained in given list."""
  createdAt_in: [DateTime!]

  """All values that are not contained in given list."""
  createdAt_not_in: [DateTime!]

  """All values less than the given value."""
  createdAt_lt: DateTime

  """All values less than or equal the given value."""
  createdAt_lte: DateTime

  """All values greater than the given value."""
  createdAt_gt: DateTime

  """All values greater than or equal the given value."""
  createdAt_gte: DateTime
  description: String

  """All values that are not equal to given value."""
  description_not: String

  """All values that are contained in given list."""
  description_in: [String!]

  """All values that are not contained in given list."""
  description_not_in: [String!]

  """All values less than the given value."""
  description_lt: String

  """All values less than or equal the given value."""
  description_lte: String

  """All values greater than the given value."""
  description_gt: String

  """All values greater than or equal the given value."""
  description_gte: String

  """All values containing the given string."""
  description_contains: String

  """All values not containing the given string."""
  description_not_contains: String

  """All values starting with the given string."""
  description_starts_with: String

  """All values not starting with the given string."""
  description_not_starts_with: String

  """All values ending with the given string."""
  description_ends_with: String

  """All values not ending with the given string."""
  description_not_ends_with: String
  title: String

  """All values that are not equal to given value."""
  title_not: String

  """All values that are contained in given list."""
  title_in: [String!]

  """All values that are not contained in given list."""
  title_not_in: [String!]

  """All values less than the given value."""
  title_lt: String

  """All values less than or equal the given value."""
  title_lte: String

  """All values greater than the given value."""
  title_gt: String

  """All values greater than or equal the given value."""
  title_gte: String

  """All values containing the given string."""
  title_contains: String

  """All values not containing the given string."""
  title_not_contains: String

  """All values starting with the given string."""
  title_starts_with: String

  """All values not starting with the given string."""
  title_not_starts_with: String

  """All values ending with the given string."""
  title_ends_with: String

  """All values not ending with the given string."""
  title_not_ends_with: String
  produce: String

  """All values that are not equal to given value."""
  produce_not: String

  """All values that are contained in given list."""
  produce_in: [String!]

  """All values that are not contained in given list."""
  produce_not_in: [String!]

  """All values less than the given value."""
  produce_lt: String

  """All values less than or equal the given value."""
  produce_lte: String

  """All values greater than the given value."""
  produce_gt: String

  """All values greater than or equal the given value."""
  produce_gte: String

  """All values containing the given string."""
  produce_contains: String

  """All values not containing the given string."""
  produce_not_contains: String

  """All values starting with the given string."""
  produce_starts_with: String

  """All values not starting with the given string."""
  produce_not_starts_with: String

  """All values ending with the given string."""
  produce_ends_with: String

  """All values not ending with the given string."""
  produce_not_ends_with: String
  rating: Float

  """All values that are not equal to given value."""
  rating_not: Float

  """All values that are contained in given list."""
  rating_in: [Float!]

  """All values that are not contained in given list."""
  rating_not_in: [Float!]

  """All values less than the given value."""
  rating_lt: Float

  """All values less than or equal the given value."""
  rating_lte: Float

  """All values greater than the given value."""
  rating_gt: Float

  """All values greater than or equal the given value."""
  rating_gte: Float
  no_reviews: Int

  """All values that are not equal to given value."""
  no_reviews_not: Int

  """All values that are contained in given list."""
  no_reviews_in: [Int!]

  """All values that are not contained in given list."""
  no_reviews_not_in: [Int!]

  """All values less than the given value."""
  no_reviews_lt: Int

  """All values less than or equal the given value."""
  no_reviews_lte: Int

  """All values greater than the given value."""
  no_reviews_gt: Int

  """All values greater than or equal the given value."""
  no_reviews_gte: Int
  price_lei: Int

  """All values that are not equal to given value."""
  price_lei_not: Int

  """All values that are contained in given list."""
  price_lei_in: [Int!]

  """All values that are not contained in given list."""
  price_lei_not_in: [Int!]

  """All values less than the given value."""
  price_lei_lt: Int

  """All values less than or equal the given value."""
  price_lei_lte: Int

  """All values greater than the given value."""
  price_lei_gt: Int

  """All values greater than or equal the given value."""
  price_lei_gte: Int
  price_bani: Int

  """All values that are not equal to given value."""
  price_bani_not: Int

  """All values that are contained in given list."""
  price_bani_in: [Int!]

  """All values that are not contained in given list."""
  price_bani_not_in: [Int!]

  """All values less than the given value."""
  price_bani_lt: Int

  """All values less than or equal the given value."""
  price_bani_lte: Int

  """All values greater than the given value."""
  price_bani_gt: Int

  """All values greater than or equal the given value."""
  price_bani_gte: Int
  per: String

  """All values that are not equal to given value."""
  per_not: String

  """All values that are contained in given list."""
  per_in: [String!]

  """All values that are not contained in given list."""
  per_not_in: [String!]

  """All values less than the given value."""
  per_lt: String

  """All values less than or equal the given value."""
  per_lte: String

  """All values greater than the given value."""
  per_gt: String

  """All values greater than or equal the given value."""
  per_gte: String

  """All values containing the given string."""
  per_contains: String

  """All values not containing the given string."""
  per_not_contains: String

  """All values starting with the given string."""
  per_starts_with: String

  """All values not starting with the given string."""
  per_not_starts_with: String

  """All values ending with the given string."""
  per_ends_with: String

  """All values not ending with the given string."""
  per_not_ends_with: String
  postedBy: UserWhereInput
  reviews_every: ReviewWhereInput
  reviews_some: ReviewWhereInput
  reviews_none: ReviewWhereInput
}

input EntryWhereUniqueInput {
  id: ID
}

"""
The `Long` scalar type represents non-fractional signed whole numeric values.
Long can represent values between -(2^63) and 2^63 - 1.
"""
scalar Long

type Mutation {
  createEntry(data: EntryCreateInput!): Entry!
  createVote(data: VoteCreateInput!): Vote!
  createReview(data: ReviewCreateInput!): Review!
  createUser(data: UserCreateInput!): User!
  updateEntry(data: EntryUpdateInput!, where: EntryWhereUniqueInput!): Entry
  updateVote(data: VoteUpdateInput!, where: VoteWhereUniqueInput!): Vote
  updateReview(data: ReviewUpdateInput!, where: ReviewWhereUniqueInput!): Review
  updateUser(data: UserUpdateInput!, where: UserWhereUniqueInput!): User
  deleteEntry(where: EntryWhereUniqueInput!): Entry
  deleteVote(where: VoteWhereUniqueInput!): Vote
  deleteReview(where: ReviewWhereUniqueInput!): Review
  deleteUser(where: UserWhereUniqueInput!): User
  upsertEntry(where: EntryWhereUniqueInput!, create: EntryCreateInput!, update: EntryUpdateInput!): Entry!
  upsertVote(where: VoteWhereUniqueInput!, create: VoteCreateInput!, update: VoteUpdateInput!): Vote!
  upsertReview(where: ReviewWhereUniqueInput!, create: ReviewCreateInput!, update: ReviewUpdateInput!): Review!
  upsertUser(where: UserWhereUniqueInput!, create: UserCreateInput!, update: UserUpdateInput!): User!
  updateManyEntries(data: EntryUpdateInput!, where: EntryWhereInput): BatchPayload!
  updateManyVotes(data: VoteUpdateInput!, where: VoteWhereInput): BatchPayload!
  updateManyReviews(data: ReviewUpdateInput!, where: ReviewWhereInput): BatchPayload!
  updateManyUsers(data: UserUpdateInput!, where: UserWhereInput): BatchPayload!
  deleteManyEntries(where: EntryWhereInput): BatchPayload!
  deleteManyVotes(where: VoteWhereInput): BatchPayload!
  deleteManyReviews(where: ReviewWhereInput): BatchPayload!
  deleteManyUsers(where: UserWhereInput): BatchPayload!
}

enum MutationType {
  CREATED
  UPDATED
  DELETED
}

"""An object with an ID"""
interface Node {
  """The id of the object."""
  id: ID!
}

"""Information about pagination in a connection."""
type PageInfo {
  """When paginating forwards, are there more items?"""
  hasNextPage: Boolean!

  """When paginating backwards, are there more items?"""
  hasPreviousPage: Boolean!

  """When paginating backwards, the cursor to continue."""
  startCursor: String

  """When paginating forwards, the cursor to continue."""
  endCursor: String
}

type Query {
  entries(where: EntryWhereInput, orderBy: EntryOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Entry]!
  votes(where: VoteWhereInput, orderBy: VoteOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Vote]!
  reviews(where: ReviewWhereInput, orderBy: ReviewOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Review]!
  users(where: UserWhereInput, orderBy: UserOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [User]!
  entry(where: EntryWhereUniqueInput!): Entry
  vote(where: VoteWhereUniqueInput!): Vote
  review(where: ReviewWhereUniqueInput!): Review
  user(where: UserWhereUniqueInput!): User
  entriesConnection(where: EntryWhereInput, orderBy: EntryOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): EntryConnection!
  votesConnection(where: VoteWhereInput, orderBy: VoteOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): VoteConnection!
  reviewsConnection(where: ReviewWhereInput, orderBy: ReviewOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): ReviewConnection!
  usersConnection(where: UserWhereInput, orderBy: UserOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): UserConnection!

  """Fetches an object given its ID"""
  node(
    """The ID of an object"""
    id: ID!
  ): Node
}

type Review implements Node {
  id: ID!
  createdAt: DateTime!
  content: String!
  postedBy(where: UserWhereInput): User!
  postedOn(where: EntryWhereInput): Entry!
  no_reviews: Int!
  opinion: Float!
}

"""A connection to a list of items."""
type ReviewConnection {
  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """A list of edges."""
  edges: [ReviewEdge]!
  aggregate: AggregateReview!
}

input ReviewCreateInput {
  content: String!
  no_reviews: Int!
  opinion: Float!
  postedBy: UserCreateOneInput!
  postedOn: EntryCreateOneWithoutReviewsInput!
}

input ReviewCreateManyWithoutPostedOnInput {
  create: [ReviewCreateWithoutPostedOnInput!]
  connect: [ReviewWhereUniqueInput!]
}

input ReviewCreateOneInput {
  create: ReviewCreateInput
  connect: ReviewWhereUniqueInput
}

input ReviewCreateWithoutPostedOnInput {
  content: String!
  no_reviews: Int!
  opinion: Float!
  postedBy: UserCreateOneInput!
}

"""An edge in a connection."""
type ReviewEdge {
  """The item at the end of the edge."""
  node: Review!

  """A cursor for use in pagination."""
  cursor: String!
}

enum ReviewOrderByInput {
  id_ASC
  id_DESC
  createdAt_ASC
  createdAt_DESC
  content_ASC
  content_DESC
  no_reviews_ASC
  no_reviews_DESC
  opinion_ASC
  opinion_DESC
  updatedAt_ASC
  updatedAt_DESC
}

type ReviewPreviousValues {
  id: ID!
  createdAt: DateTime!
  content: String!
  no_reviews: Int!
  opinion: Float!
}

type ReviewSubscriptionPayload {
  mutation: MutationType!
  node: Review
  updatedFields: [String!]
  previousValues: ReviewPreviousValues
}

input ReviewSubscriptionWhereInput {
  """Logical AND on all given filters."""
  AND: [ReviewSubscriptionWhereInput!]

  """Logical OR on all given filters."""
  OR: [ReviewSubscriptionWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [ReviewSubscriptionWhereInput!]

  """
  The subscription event gets dispatched when it's listed in mutation_in
  """
  mutation_in: [MutationType!]

  """
  The subscription event gets only dispatched when one of the updated fields names is included in this list
  """
  updatedFields_contains: String

  """
  The subscription event gets only dispatched when all of the field names included in this list have been updated
  """
  updatedFields_contains_every: [String!]

  """
  The subscription event gets only dispatched when some of the field names included in this list have been updated
  """
  updatedFields_contains_some: [String!]
  node: ReviewWhereInput
}

input ReviewUpdateDataInput {
  content: String
  no_reviews: Int
  opinion: Float
  postedBy: UserUpdateOneInput
  postedOn: EntryUpdateOneWithoutReviewsInput
}

input ReviewUpdateInput {
  content: String
  no_reviews: Int
  opinion: Float
  postedBy: UserUpdateOneInput
  postedOn: EntryUpdateOneWithoutReviewsInput
}

input ReviewUpdateManyWithoutPostedOnInput {
  create: [ReviewCreateWithoutPostedOnInput!]
  connect: [ReviewWhereUniqueInput!]
  disconnect: [ReviewWhereUniqueInput!]
  delete: [ReviewWhereUniqueInput!]
  update: [ReviewUpdateWithWhereUniqueWithoutPostedOnInput!]
  upsert: [ReviewUpsertWithWhereUniqueWithoutPostedOnInput!]
}

input ReviewUpdateOneInput {
  create: ReviewCreateInput
  connect: ReviewWhereUniqueInput
  delete: Boolean
  update: ReviewUpdateDataInput
  upsert: ReviewUpsertNestedInput
}

input ReviewUpdateWithoutPostedOnDataInput {
  content: String
  no_reviews: Int
  opinion: Float
  postedBy: UserUpdateOneInput
}

input ReviewUpdateWithWhereUniqueWithoutPostedOnInput {
  where: ReviewWhereUniqueInput!
  data: ReviewUpdateWithoutPostedOnDataInput!
}

input ReviewUpsertNestedInput {
  update: ReviewUpdateDataInput!
  create: ReviewCreateInput!
}

input ReviewUpsertWithWhereUniqueWithoutPostedOnInput {
  where: ReviewWhereUniqueInput!
  update: ReviewUpdateWithoutPostedOnDataInput!
  create: ReviewCreateWithoutPostedOnInput!
}

input ReviewWhereInput {
  """Logical AND on all given filters."""
  AND: [ReviewWhereInput!]

  """Logical OR on all given filters."""
  OR: [ReviewWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [ReviewWhereInput!]
  id: ID

  """All values that are not equal to given value."""
  id_not: ID

  """All values that are contained in given list."""
  id_in: [ID!]

  """All values that are not contained in given list."""
  id_not_in: [ID!]

  """All values less than the given value."""
  id_lt: ID

  """All values less than or equal the given value."""
  id_lte: ID

  """All values greater than the given value."""
  id_gt: ID

  """All values greater than or equal the given value."""
  id_gte: ID

  """All values containing the given string."""
  id_contains: ID

  """All values not containing the given string."""
  id_not_contains: ID

  """All values starting with the given string."""
  id_starts_with: ID

  """All values not starting with the given string."""
  id_not_starts_with: ID

  """All values ending with the given string."""
  id_ends_with: ID

  """All values not ending with the given string."""
  id_not_ends_with: ID
  createdAt: DateTime

  """All values that are not equal to given value."""
  createdAt_not: DateTime

  """All values that are contained in given list."""
  createdAt_in: [DateTime!]

  """All values that are not contained in given list."""
  createdAt_not_in: [DateTime!]

  """All values less than the given value."""
  createdAt_lt: DateTime

  """All values less than or equal the given value."""
  createdAt_lte: DateTime

  """All values greater than the given value."""
  createdAt_gt: DateTime

  """All values greater than or equal the given value."""
  createdAt_gte: DateTime
  content: String

  """All values that are not equal to given value."""
  content_not: String

  """All values that are contained in given list."""
  content_in: [String!]

  """All values that are not contained in given list."""
  content_not_in: [String!]

  """All values less than the given value."""
  content_lt: String

  """All values less than or equal the given value."""
  content_lte: String

  """All values greater than the given value."""
  content_gt: String

  """All values greater than or equal the given value."""
  content_gte: String

  """All values containing the given string."""
  content_contains: String

  """All values not containing the given string."""
  content_not_contains: String

  """All values starting with the given string."""
  content_starts_with: String

  """All values not starting with the given string."""
  content_not_starts_with: String

  """All values ending with the given string."""
  content_ends_with: String

  """All values not ending with the given string."""
  content_not_ends_with: String
  no_reviews: Int

  """All values that are not equal to given value."""
  no_reviews_not: Int

  """All values that are contained in given list."""
  no_reviews_in: [Int!]

  """All values that are not contained in given list."""
  no_reviews_not_in: [Int!]

  """All values less than the given value."""
  no_reviews_lt: Int

  """All values less than or equal the given value."""
  no_reviews_lte: Int

  """All values greater than the given value."""
  no_reviews_gt: Int

  """All values greater than or equal the given value."""
  no_reviews_gte: Int
  opinion: Float

  """All values that are not equal to given value."""
  opinion_not: Float

  """All values that are contained in given list."""
  opinion_in: [Float!]

  """All values that are not contained in given list."""
  opinion_not_in: [Float!]

  """All values less than the given value."""
  opinion_lt: Float

  """All values less than or equal the given value."""
  opinion_lte: Float

  """All values greater than the given value."""
  opinion_gt: Float

  """All values greater than or equal the given value."""
  opinion_gte: Float
  postedBy: UserWhereInput
  postedOn: EntryWhereInput
  _MagicalBackRelation_ReviewToVote_every: VoteWhereInput
  _MagicalBackRelation_ReviewToVote_some: VoteWhereInput
  _MagicalBackRelation_ReviewToVote_none: VoteWhereInput
}

input ReviewWhereUniqueInput {
  id: ID
}

type Subscription {
  entry(where: EntrySubscriptionWhereInput): EntrySubscriptionPayload
  vote(where: VoteSubscriptionWhereInput): VoteSubscriptionPayload
  review(where: ReviewSubscriptionWhereInput): ReviewSubscriptionPayload
  user(where: UserSubscriptionWhereInput): UserSubscriptionPayload
}

type User implements Node {
  id: ID!
  name: String!
  email: String!
  password: String!
  entries(where: EntryWhereInput, orderBy: EntryOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Entry!]
  rating: Float!
  no_reviews: Int!
  telephone: String
  address: String
  other: String
}

"""A connection to a list of items."""
type UserConnection {
  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """A list of edges."""
  edges: [UserEdge]!
  aggregate: AggregateUser!
}

input UserCreateInput {
  name: String!
  email: String!
  password: String!
  rating: Float!
  no_reviews: Int!
  telephone: String
  address: String
  other: String
  entries: EntryCreateManyWithoutPostedByInput
}

input UserCreateOneInput {
  create: UserCreateInput
  connect: UserWhereUniqueInput
}

input UserCreateOneWithoutEntriesInput {
  create: UserCreateWithoutEntriesInput
  connect: UserWhereUniqueInput
}

input UserCreateWithoutEntriesInput {
  name: String!
  email: String!
  password: String!
  rating: Float!
  no_reviews: Int!
  telephone: String
  address: String
  other: String
}

"""An edge in a connection."""
type UserEdge {
  """The item at the end of the edge."""
  node: User!

  """A cursor for use in pagination."""
  cursor: String!
}

enum UserOrderByInput {
  id_ASC
  id_DESC
  name_ASC
  name_DESC
  email_ASC
  email_DESC
  password_ASC
  password_DESC
  rating_ASC
  rating_DESC
  no_reviews_ASC
  no_reviews_DESC
  telephone_ASC
  telephone_DESC
  address_ASC
  address_DESC
  other_ASC
  other_DESC
  updatedAt_ASC
  updatedAt_DESC
  createdAt_ASC
  createdAt_DESC
}

type UserPreviousValues {
  id: ID!
  name: String!
  email: String!
  password: String!
  rating: Float!
  no_reviews: Int!
  telephone: String
  address: String
  other: String
}

type UserSubscriptionPayload {
  mutation: MutationType!
  node: User
  updatedFields: [String!]
  previousValues: UserPreviousValues
}

input UserSubscriptionWhereInput {
  """Logical AND on all given filters."""
  AND: [UserSubscriptionWhereInput!]

  """Logical OR on all given filters."""
  OR: [UserSubscriptionWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [UserSubscriptionWhereInput!]

  """
  The subscription event gets dispatched when it's listed in mutation_in
  """
  mutation_in: [MutationType!]

  """
  The subscription event gets only dispatched when one of the updated fields names is included in this list
  """
  updatedFields_contains: String

  """
  The subscription event gets only dispatched when all of the field names included in this list have been updated
  """
  updatedFields_contains_every: [String!]

  """
  The subscription event gets only dispatched when some of the field names included in this list have been updated
  """
  updatedFields_contains_some: [String!]
  node: UserWhereInput
}

input UserUpdateDataInput {
  name: String
  email: String
  password: String
  rating: Float
  no_reviews: Int
  telephone: String
  address: String
  other: String
  entries: EntryUpdateManyWithoutPostedByInput
}

input UserUpdateInput {
  name: String
  email: String
  password: String
  rating: Float
  no_reviews: Int
  telephone: String
  address: String
  other: String
  entries: EntryUpdateManyWithoutPostedByInput
}

input UserUpdateOneInput {
  create: UserCreateInput
  connect: UserWhereUniqueInput
  delete: Boolean
  update: UserUpdateDataInput
  upsert: UserUpsertNestedInput
}

input UserUpdateOneWithoutEntriesInput {
  create: UserCreateWithoutEntriesInput
  connect: UserWhereUniqueInput
  delete: Boolean
  update: UserUpdateWithoutEntriesDataInput
  upsert: UserUpsertWithoutEntriesInput
}

input UserUpdateWithoutEntriesDataInput {
  name: String
  email: String
  password: String
  rating: Float
  no_reviews: Int
  telephone: String
  address: String
  other: String
}

input UserUpsertNestedInput {
  update: UserUpdateDataInput!
  create: UserCreateInput!
}

input UserUpsertWithoutEntriesInput {
  update: UserUpdateWithoutEntriesDataInput!
  create: UserCreateWithoutEntriesInput!
}

input UserWhereInput {
  """Logical AND on all given filters."""
  AND: [UserWhereInput!]

  """Logical OR on all given filters."""
  OR: [UserWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [UserWhereInput!]
  id: ID

  """All values that are not equal to given value."""
  id_not: ID

  """All values that are contained in given list."""
  id_in: [ID!]

  """All values that are not contained in given list."""
  id_not_in: [ID!]

  """All values less than the given value."""
  id_lt: ID

  """All values less than or equal the given value."""
  id_lte: ID

  """All values greater than the given value."""
  id_gt: ID

  """All values greater than or equal the given value."""
  id_gte: ID

  """All values containing the given string."""
  id_contains: ID

  """All values not containing the given string."""
  id_not_contains: ID

  """All values starting with the given string."""
  id_starts_with: ID

  """All values not starting with the given string."""
  id_not_starts_with: ID

  """All values ending with the given string."""
  id_ends_with: ID

  """All values not ending with the given string."""
  id_not_ends_with: ID
  name: String

  """All values that are not equal to given value."""
  name_not: String

  """All values that are contained in given list."""
  name_in: [String!]

  """All values that are not contained in given list."""
  name_not_in: [String!]

  """All values less than the given value."""
  name_lt: String

  """All values less than or equal the given value."""
  name_lte: String

  """All values greater than the given value."""
  name_gt: String

  """All values greater than or equal the given value."""
  name_gte: String

  """All values containing the given string."""
  name_contains: String

  """All values not containing the given string."""
  name_not_contains: String

  """All values starting with the given string."""
  name_starts_with: String

  """All values not starting with the given string."""
  name_not_starts_with: String

  """All values ending with the given string."""
  name_ends_with: String

  """All values not ending with the given string."""
  name_not_ends_with: String
  email: String

  """All values that are not equal to given value."""
  email_not: String

  """All values that are contained in given list."""
  email_in: [String!]

  """All values that are not contained in given list."""
  email_not_in: [String!]

  """All values less than the given value."""
  email_lt: String

  """All values less than or equal the given value."""
  email_lte: String

  """All values greater than the given value."""
  email_gt: String

  """All values greater than or equal the given value."""
  email_gte: String

  """All values containing the given string."""
  email_contains: String

  """All values not containing the given string."""
  email_not_contains: String

  """All values starting with the given string."""
  email_starts_with: String

  """All values not starting with the given string."""
  email_not_starts_with: String

  """All values ending with the given string."""
  email_ends_with: String

  """All values not ending with the given string."""
  email_not_ends_with: String
  password: String

  """All values that are not equal to given value."""
  password_not: String

  """All values that are contained in given list."""
  password_in: [String!]

  """All values that are not contained in given list."""
  password_not_in: [String!]

  """All values less than the given value."""
  password_lt: String

  """All values less than or equal the given value."""
  password_lte: String

  """All values greater than the given value."""
  password_gt: String

  """All values greater than or equal the given value."""
  password_gte: String

  """All values containing the given string."""
  password_contains: String

  """All values not containing the given string."""
  password_not_contains: String

  """All values starting with the given string."""
  password_starts_with: String

  """All values not starting with the given string."""
  password_not_starts_with: String

  """All values ending with the given string."""
  password_ends_with: String

  """All values not ending with the given string."""
  password_not_ends_with: String
  rating: Float

  """All values that are not equal to given value."""
  rating_not: Float

  """All values that are contained in given list."""
  rating_in: [Float!]

  """All values that are not contained in given list."""
  rating_not_in: [Float!]

  """All values less than the given value."""
  rating_lt: Float

  """All values less than or equal the given value."""
  rating_lte: Float

  """All values greater than the given value."""
  rating_gt: Float

  """All values greater than or equal the given value."""
  rating_gte: Float
  no_reviews: Int

  """All values that are not equal to given value."""
  no_reviews_not: Int

  """All values that are contained in given list."""
  no_reviews_in: [Int!]

  """All values that are not contained in given list."""
  no_reviews_not_in: [Int!]

  """All values less than the given value."""
  no_reviews_lt: Int

  """All values less than or equal the given value."""
  no_reviews_lte: Int

  """All values greater than the given value."""
  no_reviews_gt: Int

  """All values greater than or equal the given value."""
  no_reviews_gte: Int
  telephone: String

  """All values that are not equal to given value."""
  telephone_not: String

  """All values that are contained in given list."""
  telephone_in: [String!]

  """All values that are not contained in given list."""
  telephone_not_in: [String!]

  """All values less than the given value."""
  telephone_lt: String

  """All values less than or equal the given value."""
  telephone_lte: String

  """All values greater than the given value."""
  telephone_gt: String

  """All values greater than or equal the given value."""
  telephone_gte: String

  """All values containing the given string."""
  telephone_contains: String

  """All values not containing the given string."""
  telephone_not_contains: String

  """All values starting with the given string."""
  telephone_starts_with: String

  """All values not starting with the given string."""
  telephone_not_starts_with: String

  """All values ending with the given string."""
  telephone_ends_with: String

  """All values not ending with the given string."""
  telephone_not_ends_with: String
  address: String

  """All values that are not equal to given value."""
  address_not: String

  """All values that are contained in given list."""
  address_in: [String!]

  """All values that are not contained in given list."""
  address_not_in: [String!]

  """All values less than the given value."""
  address_lt: String

  """All values less than or equal the given value."""
  address_lte: String

  """All values greater than the given value."""
  address_gt: String

  """All values greater than or equal the given value."""
  address_gte: String

  """All values containing the given string."""
  address_contains: String

  """All values not containing the given string."""
  address_not_contains: String

  """All values starting with the given string."""
  address_starts_with: String

  """All values not starting with the given string."""
  address_not_starts_with: String

  """All values ending with the given string."""
  address_ends_with: String

  """All values not ending with the given string."""
  address_not_ends_with: String
  other: String

  """All values that are not equal to given value."""
  other_not: String

  """All values that are contained in given list."""
  other_in: [String!]

  """All values that are not contained in given list."""
  other_not_in: [String!]

  """All values less than the given value."""
  other_lt: String

  """All values less than or equal the given value."""
  other_lte: String

  """All values greater than the given value."""
  other_gt: String

  """All values greater than or equal the given value."""
  other_gte: String

  """All values containing the given string."""
  other_contains: String

  """All values not containing the given string."""
  other_not_contains: String

  """All values starting with the given string."""
  other_starts_with: String

  """All values not starting with the given string."""
  other_not_starts_with: String

  """All values ending with the given string."""
  other_ends_with: String

  """All values not ending with the given string."""
  other_not_ends_with: String
  entries_every: EntryWhereInput
  entries_some: EntryWhereInput
  entries_none: EntryWhereInput
  _MagicalBackRelation_UserToVote_every: VoteWhereInput
  _MagicalBackRelation_UserToVote_some: VoteWhereInput
  _MagicalBackRelation_UserToVote_none: VoteWhereInput
  _MagicalBackRelation_ReviewToUser_every: ReviewWhereInput
  _MagicalBackRelation_ReviewToUser_some: ReviewWhereInput
  _MagicalBackRelation_ReviewToUser_none: ReviewWhereInput
}

input UserWhereUniqueInput {
  id: ID
  email: String
}

type Vote implements Node {
  id: ID!
  postedBy(where: UserWhereInput): User!
  postedOn(where: ReviewWhereInput): Review!
  opinion: Int!
}

"""A connection to a list of items."""
type VoteConnection {
  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """A list of edges."""
  edges: [VoteEdge]!
  aggregate: AggregateVote!
}

input VoteCreateInput {
  opinion: Int!
  postedBy: UserCreateOneInput!
  postedOn: ReviewCreateOneInput!
}

"""An edge in a connection."""
type VoteEdge {
  """The item at the end of the edge."""
  node: Vote!

  """A cursor for use in pagination."""
  cursor: String!
}

enum VoteOrderByInput {
  id_ASC
  id_DESC
  opinion_ASC
  opinion_DESC
  updatedAt_ASC
  updatedAt_DESC
  createdAt_ASC
  createdAt_DESC
}

type VotePreviousValues {
  id: ID!
  opinion: Int!
}

type VoteSubscriptionPayload {
  mutation: MutationType!
  node: Vote
  updatedFields: [String!]
  previousValues: VotePreviousValues
}

input VoteSubscriptionWhereInput {
  """Logical AND on all given filters."""
  AND: [VoteSubscriptionWhereInput!]

  """Logical OR on all given filters."""
  OR: [VoteSubscriptionWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [VoteSubscriptionWhereInput!]

  """
  The subscription event gets dispatched when it's listed in mutation_in
  """
  mutation_in: [MutationType!]

  """
  The subscription event gets only dispatched when one of the updated fields names is included in this list
  """
  updatedFields_contains: String

  """
  The subscription event gets only dispatched when all of the field names included in this list have been updated
  """
  updatedFields_contains_every: [String!]

  """
  The subscription event gets only dispatched when some of the field names included in this list have been updated
  """
  updatedFields_contains_some: [String!]
  node: VoteWhereInput
}

input VoteUpdateInput {
  opinion: Int
  postedBy: UserUpdateOneInput
  postedOn: ReviewUpdateOneInput
}

input VoteWhereInput {
  """Logical AND on all given filters."""
  AND: [VoteWhereInput!]

  """Logical OR on all given filters."""
  OR: [VoteWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [VoteWhereInput!]
  id: ID

  """All values that are not equal to given value."""
  id_not: ID

  """All values that are contained in given list."""
  id_in: [ID!]

  """All values that are not contained in given list."""
  id_not_in: [ID!]

  """All values less than the given value."""
  id_lt: ID

  """All values less than or equal the given value."""
  id_lte: ID

  """All values greater than the given value."""
  id_gt: ID

  """All values greater than or equal the given value."""
  id_gte: ID

  """All values containing the given string."""
  id_contains: ID

  """All values not containing the given string."""
  id_not_contains: ID

  """All values starting with the given string."""
  id_starts_with: ID

  """All values not starting with the given string."""
  id_not_starts_with: ID

  """All values ending with the given string."""
  id_ends_with: ID

  """All values not ending with the given string."""
  id_not_ends_with: ID
  opinion: Int

  """All values that are not equal to given value."""
  opinion_not: Int

  """All values that are contained in given list."""
  opinion_in: [Int!]

  """All values that are not contained in given list."""
  opinion_not_in: [Int!]

  """All values less than the given value."""
  opinion_lt: Int

  """All values less than or equal the given value."""
  opinion_lte: Int

  """All values greater than the given value."""
  opinion_gt: Int

  """All values greater than or equal the given value."""
  opinion_gte: Int
  postedBy: UserWhereInput
  postedOn: ReviewWhereInput
}

input VoteWhereUniqueInput {
  id: ID
}
